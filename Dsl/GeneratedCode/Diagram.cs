//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSDiagram")]

namespace UPM_IPS.MDFSJPGVSProyectoIPS
{
	/// <summary>
	/// DomainClass MDFSJPGVSProyectoIPSDiagram
	/// Description for UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSDiagram.DisplayName", typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSDomainModel), "UPM_IPS.MDFSJPGVSProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSDiagram.Description", typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSDomainModel), "UPM_IPS.MDFSJPGVSProyectoIPS.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("160692bd-3434-4cea-b1d8-3ca7cc763194")]
	public partial class MDFSJPGVSProyectoIPSDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Diagram styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromArgb(255, 224, 224, 224);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.DiagramBackground, backgroundBrush);
		
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::UPM_IPS.MDFSJPGVSProyectoIPS.ClaseEnriquecida)
			{
				global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaClaseEnriquecida newShape = new global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaClaseEnriquecida(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloClase)
			{
				global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaEstiloClase newShape = new global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaEstiloClase(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloAtributo)
			{
				global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaEstiloAtributo newShape = new global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaEstiloAtributo(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionFuerte)
			{
				global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAgregacionFuerte newShape = new global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAgregacionFuerte(this.Partition);
				return newShape;
			}
			if(element is global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionDebil)
			{
				global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAgregacionDebil newShape = new global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAgregacionDebil(this.Partition);
				return newShape;
			}
			if(element is global::UPM_IPS.MDFSJPGVSProyectoIPS.Clase)
			{
				global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaClase newShape = new global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaClase(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.MDFSJPGVSProyectoIPS.Atributo)
			{
				global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAtributo newShape = new global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAtributo(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.MDFSJPGVSProyectoIPS.Operacion)
			{
				global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaOperacion newShape = new global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaOperacion(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloOperacion)
			{
				global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaEstiloOperacion newShape = new global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaEstiloOperacion(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.MDFSJPGVSProyectoIPS.Parametro)
			{
				global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaParametro newShape = new global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaParametro(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion)
			{
				global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAsociacion newShape = new global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAsociacion(this.Partition);
				return newShape;
			}
			if(element is global::UPM_IPS.MDFSJPGVSProyectoIPS.Herencia)
			{
				global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaHerencia newShape = new global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaHerencia(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaClase.DecoratorsInitialized += MetaforaClaseDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAtributo.DecoratorsInitialized += MetaforaAtributoDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaOperacion.DecoratorsInitialized += MetaforaOperacionDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaClaseEnriquecida.DecoratorsInitialized += MetaforaClaseEnriquecidaDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaEstiloOperacion.DecoratorsInitialized += MetaforaEstiloOperacionDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaEstiloClase.DecoratorsInitialized += MetaforaEstiloClaseDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaEstiloAtributo.DecoratorsInitialized += MetaforaEstiloAtributoDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaParametro.DecoratorsInitialized += MetaforaParametroDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAsociacion.DecoratorsInitialized += MetaforaAsociacionDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAgregacionFuerte.DecoratorsInitialized += MetaforaAgregacionFuerteDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAgregacionDebil.DecoratorsInitialized += MetaforaAgregacionDebilDecoratorMap.OnDecoratorsInitialized;
			global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaHerencia.DecoratorsInitialized += MetaforaHerenciaDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaClase.
		/// </summary>
		internal static partial class MetaforaClaseDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaClase.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Clase.NombreCompletoDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreDec").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaAtributo.
		/// </summary>
		internal static partial class MetaforaAtributoDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaAtributo.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Atributo.NameTipoDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "nombreTipoTxDec").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaOperacion.
		/// </summary>
		internal static partial class MetaforaOperacionDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaOperacion.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Operacion.NameTipoDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "nombreOpTxDec").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaClaseEnriquecida.
		/// </summary>
		internal static partial class MetaforaClaseEnriquecidaDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaClaseEnriquecida.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.ClaseEnriquecida.NombreCompletoEDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreEnriq").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaEstiloOperacion.
		/// </summary>
		internal static partial class MetaforaEstiloOperacionDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaEstiloOperacion.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloOperacion.EstiloOpCompletoDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "EstiloOpTx").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaEstiloClase.
		/// </summary>
		internal static partial class MetaforaEstiloClaseDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaEstiloClase.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				MetaforaEstiloOperacionDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloClase.EstiloClCompletoDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "EstiloClTx").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaEstiloAtributo.
		/// </summary>
		internal static partial class MetaforaEstiloAtributoDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaEstiloAtributo.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				MetaforaEstiloOperacionDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloAtributo.EstiloAtCompletoDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "EstiloAtTx").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaParametro.
		/// </summary>
		internal static partial class MetaforaParametroDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaParametro.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Parametro.NombreCompletoPDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreParametro").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaAsociacion.
		/// </summary>
		internal static partial class MetaforaAsociacionDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaAsociacion.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.NombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreAsociacion").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.CardinalidadInitDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalidadInit").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.CardinalidadFinDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalidadFin").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaAgregacionFuerte.
		/// </summary>
		internal static partial class MetaforaAgregacionFuerteDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaAgregacionFuerte.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.CardinalidadFinDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalidadAgregacionFuerteFin").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.CardinalidadInitDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalidadAgregacionFuerteInit").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.NombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreAgregacionFuerte").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaAgregacionDebil.
		/// </summary>
		internal static partial class MetaforaAgregacionDebilDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaAgregacionDebil.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.CardinalidadFinDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalidadAgregacionDebilFin").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.CardinalidadInitDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalidadAgregacionDebilInit").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.NombreDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NombreAgregacionDebil").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MetaforaHerencia.
		/// </summary>
		internal static partial class MetaforaHerenciaDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MetaforaHerencia.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Herencia.TipoHijosDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Solapada/Disjunta").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::UPM_IPS.MDFSJPGVSProyectoIPS.Herencia.TipoHerenciaDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Total/Parcia").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		
		#region Connect actions
		private bool changingMouseAction;
		private global::UPM_IPS.MDFSJPGVSProyectoIPS.HerenciaToolConnectAction herenciaToolConnectAction;
		private global::UPM_IPS.MDFSJPGVSProyectoIPS.AsociacionToolConnectAction asociacionToolConnectAction;
		private global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionDebilConnectAction agregacionDebilConnectAction;
		private global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionFuerteToolConnectAction agregacionFuerteToolConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSToolboxHelper.HerenciaToolFilterString))
				{
					if (this.herenciaToolConnectAction == null)
					{
						this.herenciaToolConnectAction = new global::UPM_IPS.MDFSJPGVSProyectoIPS.HerenciaToolConnectAction(this);
						this.herenciaToolConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.herenciaToolConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSToolboxHelper.AsociacionToolFilterString))
				{
					if (this.asociacionToolConnectAction == null)
					{
						this.asociacionToolConnectAction = new global::UPM_IPS.MDFSJPGVSProyectoIPS.AsociacionToolConnectAction(this);
						this.asociacionToolConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.asociacionToolConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSToolboxHelper.AgregacionDebilFilterString))
				{
					if (this.agregacionDebilConnectAction == null)
					{
						this.agregacionDebilConnectAction = new global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionDebilConnectAction(this);
						this.agregacionDebilConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.agregacionDebilConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSToolboxHelper.AgregacionFuerteToolFilterString))
				{
					if (this.agregacionFuerteToolConnectAction == null)
					{
						this.agregacionFuerteToolConnectAction = new global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionFuerteToolConnectAction(this);
						this.agregacionFuerteToolConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.agregacionFuerteToolConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom connect action.
		/// </summary>
		private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom connect action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.herenciaToolConnectAction != null)
					{
						this.herenciaToolConnectAction.Dispose();
						this.herenciaToolConnectAction = null;
					}
					if(this.asociacionToolConnectAction != null)
					{
						this.asociacionToolConnectAction.Dispose();
						this.asociacionToolConnectAction = null;
					}
					if(this.agregacionDebilConnectAction != null)
					{
						this.agregacionDebilConnectAction.Dispose();
						this.agregacionDebilConnectAction = null;
					}
					if(this.agregacionFuerteToolConnectAction != null)
					{
						this.agregacionFuerteToolConnectAction.Dispose();
						this.agregacionFuerteToolConnectAction = null;
					}
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// MDFSJPGVSProyectoIPSDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x160692bd, 0x3434, 0x4cea, 0xb1, 0xd8, 0x3c, 0xa7, 0xcc, 0x76, 0x31, 0x94);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MDFSJPGVSProyectoIPSDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MDFSJPGVSProyectoIPSDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace UPM_IPS.MDFSJPGVSProyectoIPS
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.ClaseEnriquecida), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloClase), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloAtributo), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionFuerte), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionDebil), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.Clase), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.Atributo), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.Operacion), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloOperacion), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.Parametro), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.Herencia), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::UPM_IPS.MDFSJPGVSProyectoIPS.ClaseEnriquecida)
				{
					parentElement = GetParentForClaseEnriquecida((global::UPM_IPS.MDFSJPGVSProyectoIPS.ClaseEnriquecida)childElement);
				} else
				if(childElement is global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloClase)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForEstiloClase(EstiloClase childElement)
					// {
					// }
					// must be implemented in a partial class of UPM_IPS.MDFSJPGVSProyectoIPS.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForEstiloClase((global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloClase)childElement);
				} else
				if(childElement is global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloAtributo)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForEstiloAtributo(EstiloAtributo childElement)
					// {
					// }
					// must be implemented in a partial class of UPM_IPS.MDFSJPGVSProyectoIPS.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForEstiloAtributo((global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloAtributo)childElement);
				} else
				if(childElement is global::UPM_IPS.MDFSJPGVSProyectoIPS.Clase)
				{
					parentElement = GetParentForClase((global::UPM_IPS.MDFSJPGVSProyectoIPS.Clase)childElement);
				} else
				if(childElement is global::UPM_IPS.MDFSJPGVSProyectoIPS.Atributo)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForAtributo(Atributo childElement)
					// {
					// }
					// must be implemented in a partial class of UPM_IPS.MDFSJPGVSProyectoIPS.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForAtributo((global::UPM_IPS.MDFSJPGVSProyectoIPS.Atributo)childElement);
				} else
				if(childElement is global::UPM_IPS.MDFSJPGVSProyectoIPS.Operacion)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForOperacion(Operacion childElement)
					// {
					// }
					// must be implemented in a partial class of UPM_IPS.MDFSJPGVSProyectoIPS.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForOperacion((global::UPM_IPS.MDFSJPGVSProyectoIPS.Operacion)childElement);
				} else
				if(childElement is global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloOperacion)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForEstiloOperacion(EstiloOperacion childElement)
					// {
					// }
					// must be implemented in a partial class of UPM_IPS.MDFSJPGVSProyectoIPS.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForEstiloOperacion((global::UPM_IPS.MDFSJPGVSProyectoIPS.EstiloOperacion)childElement);
				} else
				if(childElement is global::UPM_IPS.MDFSJPGVSProyectoIPS.Parametro)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForParametro(Parametro childElement)
					// {
					// }
					// must be implemented in a partial class of UPM_IPS.MDFSJPGVSProyectoIPS.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForParametro((global::UPM_IPS.MDFSJPGVSProyectoIPS.Parametro)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::UPM_IPS.MDFSJPGVSProyectoIPS.TapizDiagramaClases GetParentForClase( global::UPM_IPS.MDFSJPGVSProyectoIPS.Clase root )
			{
				// Segments 0 and 1
				global::UPM_IPS.MDFSJPGVSProyectoIPS.TapizDiagramaClases result = root.TapizDiagramaClases;
				if ( result == null ) return null;
				return result;
			}
			public static global::UPM_IPS.MDFSJPGVSProyectoIPS.TapizDiagramaClases GetParentForClaseEnriquecida( global::UPM_IPS.MDFSJPGVSProyectoIPS.Clase root )
			{
				// Segments 0 and 1
				global::UPM_IPS.MDFSJPGVSProyectoIPS.TapizDiagramaClases result = root.TapizDiagramaClases;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
	
		/// <summary>
		/// A rule which fires when data mapped to outer text decorators has changed,
		/// so we can update the decorator host's bounds.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.Herencia), InitiallyDisabled=true)]
		internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
				
				if (e.DomainProperty.Id == global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.NombreDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAsociacion.FindMetaforaAsociacionDecorator("NombreAsociacion");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.DomainClassId);
					}
					decorator = global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAgregacionFuerte.FindMetaforaAgregacionFuerteDecorator("NombreAgregacionFuerte");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionFuerte.DomainClassId);
					}
					decorator = global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAgregacionDebil.FindMetaforaAgregacionDebilDecorator("NombreAgregacionDebil");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionDebil.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.CardinalidadInitDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAsociacion.FindMetaforaAsociacionDecorator("CardinalidadInit");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.DomainClassId);
					}
					decorator = global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAgregacionFuerte.FindMetaforaAgregacionFuerteDecorator("CardinalidadAgregacionFuerteInit");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionFuerte.DomainClassId);
					}
					decorator = global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAgregacionDebil.FindMetaforaAgregacionDebilDecorator("CardinalidadAgregacionDebilInit");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionDebil.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.CardinalidadFinDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAsociacion.FindMetaforaAsociacionDecorator("CardinalidadFin");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion.DomainClassId);
					}
					decorator = global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAgregacionFuerte.FindMetaforaAgregacionFuerteDecorator("CardinalidadAgregacionFuerteFin");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionFuerte.DomainClassId);
					}
					decorator = global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaAgregacionDebil.FindMetaforaAgregacionDebilDecorator("CardinalidadAgregacionDebilFin");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionDebil.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::UPM_IPS.MDFSJPGVSProyectoIPS.Herencia.TipoHijosDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaHerencia.FindMetaforaHerenciaDecorator("Solapada/Disjunta");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.MDFSJPGVSProyectoIPS.Herencia.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::UPM_IPS.MDFSJPGVSProyectoIPS.Herencia.TipoHerenciaDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::UPM_IPS.MDFSJPGVSProyectoIPS.MetaforaHerencia.FindMetaforaHerenciaDecorator("Total/Parcia");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::UPM_IPS.MDFSJPGVSProyectoIPS.Herencia.DomainClassId);
					}
				}
			}
		}
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.Asociacion), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionFuerte), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.AgregacionDebil), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::UPM_IPS.MDFSJPGVSProyectoIPS.Herencia), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSDiagram diagram = linkShape.Diagram as global::UPM_IPS.MDFSJPGVSProyectoIPS.MDFSJPGVSProyectoIPSDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
